from xml.etree.ElementTree import TreeBuilder
import os
from lxml import etree
import requests
# import saxon library
import saxonpy
# gui imports
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from steamroller import *
from tbxUpdater import *

# Declare saxon processor and print info
proc = saxonpy.PySaxonProcessor(license=False) 
print("Test Saxon/C on Python")
print(proc.version)

# declare XSLT 3.0 processor
xslt30_processor = proc.new_xslt30_processor()
def schematronValidation(filename, _module):
    module = _module.get()
    # set the processor's working directory
    xslt30_processor.set_cwd(".")

    # first transform
    if module == 1:
        xslt30_processor.transform_to_file(source_file=resource_path("./2020-10-16-TBXcoreGenericSchematron.sch"), stylesheet_file=resource_path("./schxslt-1.8.5/2.0/pipeline-for-svrl.xsl"), output_file=resource_path("tbxSchematron.xsl"))
    elif module == 2:
        xslt30_processor.transform_to_file(source_file=resource_path("./Min.sch"), stylesheet_file=resource_path("./schxslt-1.8.5/2.0/pipeline-for-svrl.xsl"), output_file=resource_path("tbxSchematron.xsl"))
    elif module == 2:
        xslt30_processor.transform_to_file(source_file=resource_path("./TBX-Basic_DCA.sch"), stylesheet_file=resource_path("./schxslt-1.8.5/2.0/pipeline-for-svrl.xsl"), output_file=resource_path("tbxSchematron.xsl"))

    # second transform
    xslt30_processor.transform_to_file(source_file=filename, stylesheet_file=resource_path("./tbxSchematron.xsl"), output_file=filename+"SchematronReport.xml")

    # Parse report generated by Saxon/C
    ns = {"svrl": "http://purl.oclc.org/dsdl/svrl"}
    # import ElementTree for parsing*
    from lxml import etree as ET
    svrlTree = ET.parse(source=filename+"SchematronReport.xml")
    errorList = svrlTree.findall("{http://purl.oclc.org/dsdl/svrl}failed-assert")

    if(len(errorList) == 0):
        print("Passed Schematron")
        message = tk.Label(tab1, text="Passed Schematron")
        message.grid(row=5, column=0)
        return True
    else:
        tbxTree = ET.parse(source=filename)
        for error in errorList:
            errorTagPath = error.get("location")
            errorTagPath=errorTagPath.replace("Q", "")
            errorTagPath_split = errorTagPath.split('/')
            location = tbxTree.getroot()
            for x in range (2, len(errorTagPath_split)):
                location = location.find(errorTagPath_split[x])

            errorText = error.find("{http://purl.oclc.org/dsdl/svrl}text")
            print(f"Error found in tag beginning on line {location.sourceline}: " + errorText.text)
            print(errorText)
            message = tk.Label(text=f"Error found in tag beginning on line {location.sourceline}: " + errorText.text)
            message.grid(tab1, row=5, column=0)
            return False

def rngValidation(filename, _module):
    module = _module.get()
    if module == 1:
        rng_text = open(resource_path("./2020-10-16-TBXcoreGenericRNG.rng"))
    elif module == 2:
        rng_text = open(resource_path("./Min.rng"))
    elif module == 3:
        rng_text = open(resource_path("./TBXcoreStructV03_TBX-Basic_integrated.rng"))
    parsed_rng = etree.parse(rng_text)
    relaxng = etree.RelaxNG(parsed_rng)

    tbx_text = open(filename)
    tbx_doc = etree.parse(tbx_text)

    result = relaxng.validate(tbx_doc)

    if result == True:
        print("Passed RNG")
        message = tk.Label(tab1, text="Passed RNG")
        message.grid(row=4, column=0)
        return True
    else:
        try:
            relaxng.assertValid(tbx_doc)
        except:
            log = relaxng.error_log
            log_filename = filename +"RNGlog.txt"
            print(log.last_error)   
            log_file = open(log_filename, "a")
            log_file.write(str(log))
            message=tk.Label(tab1, text="RNG Error:\n"+str(log.last_error))
            message.grid(row=4, column=0)
            return False
            
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)
def browseFiles():
    filename = filedialog.askopenfilename(initialdir = "/",
                                          title = "Select a File",
                                          filetypes = (("TBX files",
                                                        "*.tbx*"),
                                                       ("all files",
                                                        "*.*")))
    file_text.configure(text=filename)

def validate():
    infile = file_text.cget("text")
    if rngValidation(infile, var) and schematronValidation(infile, var):
        print("Your TBXv3 file is valid")
        result = tk.Label(tab1, text="Your TBXv3 file is valid")
        result.grid(row=6, column=0)

window = tk.Tk()
window.title("TBX Utilities")
widgets = ttk.Notebook(window)
tab1 = tk.Frame(window)
widgets.add(tab1, text="Validator")
fileSelection = tk.Frame(tab1)
welcome = tk.Label(fileSelection,text="Welcome to the TBX core Validator\n What would like to validate?")
welcome.grid(row=1, column=0, padx=10)
middle = tk.Frame(fileSelection)
middle.grid(row=2, column=0)
file_text = tk.Label(middle, text="Please Select a file: ")
file_text.grid(row=0, column=1)
file_select = tk.Button(middle, text="Browse", command=browseFiles)
file_select.grid(column=2, row=0)
validate = tk.Button(fileSelection, text="Validate!", command=validate)
validate.grid()
fileSelection.grid(column=0, row = 0)
versionPicker = tk.Frame(tab1)
versionSelectMsg = tk.Label(versionPicker, text="Select TBX Dialect")
versionSelectMsg.pack()
var = tk.IntVar()
R1 = tk.Radiobutton(versionPicker, text="TBX-Core", variable=var, value=1)
R1.pack()
R2 = tk.Radiobutton(versionPicker, text="TBX-Min", variable=var, value=2)
R2.pack()
R3 = tk.Radiobutton(versionPicker, text="TBX-Basic", variable=var, value=3)
R3.pack()
versionPicker.grid(column=1, row=0)

tab2 = tk.Frame(window)
widgets.add(tab2, text="Steamroller")
welcome2 = tk.Label(tab2,text="Steamroller")
welcome2.grid(row=1, column=0, padx=10)
middle2 = tk.Frame(tab2)
middle2.grid(row=2, column=0)
file_text = tk.Label(middle2, text="Please Select a file: ")
file_text.grid(row=0, column=1)
file_select2 = tk.Button(middle2, text="Browse", command=browseFiles)
file_select2.grid(column=2, row=0)

steamrolltk = tk.Button(tab2, text="Steamroll!", command= lambda: steamroll(file_text.cget("text")))
steamrolltk.grid(row=3, column=0, pady=5)

tab3 = tk.Frame(window)
widgets.add(tab3, text="Upgrade")
welcome2 = tk.Label(tab3,text="Upgrade")
welcome2.grid(row=1, column=0, padx=10)
middle2 = tk.Frame(tab3)
middle2.grid(row=2, column=0)
file_text = tk.Label(middle2, text="Please Select a file: ")
file_text.grid(row=0, column=1)
file_select2 = tk.Button(middle2, text="Browse", command=browseFiles)
file_select2.grid(column=2, row=0)

Upgradetk = tk.Button(tab3, text="Upgrade", command= lambda: updater(file_text.cget("text")))
Upgradetk.grid(row=3, column=0, pady=5)

widgets.pack()
window.mainloop()